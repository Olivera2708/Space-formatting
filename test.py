import torch
import torch.nn as nn

# Simulated input tensors (from your data)
correct = torch.tensor([[ 2,  1,  0,  0,  0,  0,  0,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                         -1, -1, -1, -1, -1],
                        [ 2,  1,  0,  0,  0,  0,  0,  1,  0,  1,  0,  1, -1, -1, -1, -1, -1, -1,
                         -1, -1, -1, -1, -1]], device='cuda:0')

predictions = torch.tensor([[[ 4.2190e-01, -5.8050e-01, -1.9643e-01,  7.6429e-01],
                             [ 4.9176e-01, -3.5820e-01, -3.2653e-01,  1.2510e-02],
                             [ 7.4538e-01,  2.4043e-03, -2.4472e-01, -3.4801e-01],
                             [-3.8693e-01, -1.2462e+00,  3.9914e-01, -1.5810e-01],
                             [ 3.6292e-01, -3.0674e-01, -1.0234e-01,  1.4564e-01],
                             [ 5.3984e-01,  1.2675e-01, -1.1773e+00, -9.4978e-02],
                             [ 5.1786e-01,  2.0700e-01, -1.0284e+00, -5.4031e-02],
                             [-2.0164e-01,  2.6342e-01, -1.2593e-01,  1.7638e-01],
                             [-9.7283e-02,  3.8524e-01, -7.1230e-01,  3.0012e-01],
                             [-6.3389e-02,  2.1742e-01, -3.5108e-01,  1.9108e-01],
                             [ 9.9951e-02,  3.6066e-01, -3.8314e-01,  8.8099e-02],
                             [-2.3555e-04,  3.2035e-01, -2.4701e-01,  4.2260e-02],
                             [-9.5880e-02,  1.8029e-01, -4.7316e-01,  2.7269e-02],
                             [ 1.3087e-01,  5.3603e-02, -3.5995e-01,  2.6024e-01],
                             [-2.5790e-02,  3.2229e-01, -4.9269e-01,  3.6603e-01],
                             [-7.2101e-02,  9.5379e-02, -3.8239e-01,  7.2823e-03],
                             [-7.8502e-02,  1.9372e-01, -5.2682e-01, -1.8575e-01],
                             [ 5.3085e-02,  1.5686e-01, -3.3840e-01,  3.6965e-01],
                             [-3.7985e-02,  1.2375e-01, -5.5221e-01,  4.9495e-02],
                             [ 2.8519e-02,  2.9806e-01, -4.2905e-01,  2.4586e-01],
                             [-2.3943e-01,  3.1641e-01, -4.3512e-01,  6.2550e-02],
                             [-1.1460e-01,  3.1418e-01, -5.6532e-01,  1.7094e-01],
                             [ 2.4194e-02,  1.9865e-01, -1.4809e-01,  2.4470e-01]],

                            [[ 3.5558e-01, -7.1707e-01, -2.4108e-01,  8.3375e-01],
                             [ 2.0022e-01, -4.5137e-02, -9.6536e-04,  1.6767e-01],
                             [-5.0396e-01,  1.4371e-01, -4.0908e-01,  6.2058e-01],
                             [ 3.7436e-01,  7.8249e-02,  1.9053e-01,  6.6923e-02],
                             [-3.1548e-01, -1.7171e-01, -1.4902e+00,  2.0037e-01],
                             [-9.9341e-02, -4.9364e-01, -1.2505e+00, -4.6747e-01],
                             [ 2.4052e-01,  5.2138e-02, -8.7310e-01,  3.7379e-01],
                             [ 8.0334e-01, -1.3710e-01,  5.1386e-01, -5.0842e-01],
                             [ 7.5650e-01,  2.4253e-02,  4.2420e-01, -5.4028e-01],
                             [-4.2338e-01, -2.2924e-01, -4.3665e-01, -4.5719e-01],
                             [ 2.1908e-01,  1.2398e-01, -8.9582e-01,  2.6693e-01],
                             [-3.0866e-01,  5.9364e-01,  2.0905e-01,  6.1147e-01],
                             [-2.4561e-01,  3.7522e-01, -8.2971e-02,  9.9361e-02],
                             [-1.0456e-01,  3.4878e-01, -1.3990e-01,  3.3114e-01],
                             [-1.6109e-01,  3.3929e-01, -2.3741e-01,  2.6941e-01],
                             [ 9.8684e-02,  3.6255e-01, -1.1530e-01,  3.2082e-01],
                             [ 2.4315e-02,  3.5985e-01, -2.8342e-01,  2.4863e-01],
                             [-8.9055e-02,  3.1467e-01, -2.5184e-01,  2.5763e-01],
                             [-3.7783e-02,  4.3071e-01, -3.0586e-01,  3.3622e-02],
                             [-3.4708e-01,  4.5801e-01, -1.6899e-01,  3.1378e-01],
                             [-5.7827e-02,  4.5880e-01, -5.7922e-01,  1.9083e-01],
                             [-2.1635e-01,  2.9355e-01, -2.0711e-02,  3.2409e-01],
                             [-1.4195e-01,  3.5637e-01, -1.5546e-01,  2.8826e-01]]], device='cuda:0')

# Reshape tensors
predictions_reshaped = predictions.reshape(-1, 4)  # Shape: [46, 4]
correct_reshaped = correct.reshape(-1)  # Shape: [46]

# Define the loss function
loss_fn = nn.CrossEntropyLoss(ignore_index=-1)  # Ignore padding index -1

# Calculate the loss
loss = loss_fn(predictions_reshaped, correct_reshaped)

print("Loss:", loss.item())
